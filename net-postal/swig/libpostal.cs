//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class libpostal {
  public static libpostal_normalize_options_t libpostal_get_default_options() {
    libpostal_normalize_options_t ret = new libpostal_normalize_options_t(libpostalPINVOKE.libpostal_get_default_options(), true);
    return ret;
  }

  public static SWIGTYPE_p_p_char libpostal_expand_address(string input, libpostal_normalize_options_t options, SWIGTYPE_p_size_t n) {
    global::System.IntPtr cPtr = libpostalPINVOKE.libpostal_expand_address(input, libpostal_normalize_options_t.getCPtr(options), SWIGTYPE_p_size_t.getCPtr(n));
    SWIGTYPE_p_p_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_char(cPtr, false);
    if (libpostalPINVOKE.SWIGPendingException.Pending) throw libpostalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_p_char libpostal_expand_address_root(string input, libpostal_normalize_options_t options, SWIGTYPE_p_size_t n) {
    global::System.IntPtr cPtr = libpostalPINVOKE.libpostal_expand_address_root(input, libpostal_normalize_options_t.getCPtr(options), SWIGTYPE_p_size_t.getCPtr(n));
    SWIGTYPE_p_p_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_char(cPtr, false);
    if (libpostalPINVOKE.SWIGPendingException.Pending) throw libpostalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void libpostal_expansion_array_destroy(SWIGTYPE_p_p_char expansions, uint n) {
    libpostalPINVOKE.libpostal_expansion_array_destroy(SWIGTYPE_p_p_char.getCPtr(expansions), n);
  }

  public static void libpostal_address_parser_response_destroy(libpostal_address_parser_response_t self) {
    libpostalPINVOKE.libpostal_address_parser_response_destroy(libpostal_address_parser_response_t.getCPtr(self));
  }

  public static libpostal_address_parser_options_t libpostal_get_address_parser_default_options() {
    libpostal_address_parser_options_t ret = new libpostal_address_parser_options_t(libpostalPINVOKE.libpostal_get_address_parser_default_options(), true);
    return ret;
  }

  public static libpostal_address_parser_response_t libpostal_parse_address(string address, libpostal_address_parser_options_t options) {
    global::System.IntPtr cPtr = libpostalPINVOKE.libpostal_parse_address(address, libpostal_address_parser_options_t.getCPtr(options));
    libpostal_address_parser_response_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new libpostal_address_parser_response_t(cPtr, false);
    if (libpostalPINVOKE.SWIGPendingException.Pending) throw libpostalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool libpostal_parser_print_features(bool print_features) {
    bool ret = libpostalPINVOKE.libpostal_parser_print_features(print_features);
    return ret;
  }

  public static libpostal_language_classifier_response_t libpostal_classify_language(string address) {
    global::System.IntPtr cPtr = libpostalPINVOKE.libpostal_classify_language(address);
    libpostal_language_classifier_response_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new libpostal_language_classifier_response_t(cPtr, false);
    return ret;
  }

  public static void libpostal_language_classifier_response_destroy(libpostal_language_classifier_response_t self) {
    libpostalPINVOKE.libpostal_language_classifier_response_destroy(libpostal_language_classifier_response_t.getCPtr(self));
  }

  public static libpostal_near_dupe_hash_options_t libpostal_get_near_dupe_hash_default_options() {
    libpostal_near_dupe_hash_options_t ret = new libpostal_near_dupe_hash_options_t(libpostalPINVOKE.libpostal_get_near_dupe_hash_default_options(), true);
    return ret;
  }

  public static SWIGTYPE_p_p_char libpostal_near_dupe_hashes(uint num_components, SWIGTYPE_p_p_char labels, SWIGTYPE_p_p_char values, libpostal_near_dupe_hash_options_t options, SWIGTYPE_p_size_t num_hashes) {
    global::System.IntPtr cPtr = libpostalPINVOKE.libpostal_near_dupe_hashes(num_components, SWIGTYPE_p_p_char.getCPtr(labels), SWIGTYPE_p_p_char.getCPtr(values), libpostal_near_dupe_hash_options_t.getCPtr(options), SWIGTYPE_p_size_t.getCPtr(num_hashes));
    SWIGTYPE_p_p_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_char(cPtr, false);
    if (libpostalPINVOKE.SWIGPendingException.Pending) throw libpostalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_p_char libpostal_near_dupe_hashes_languages(uint num_components, SWIGTYPE_p_p_char labels, SWIGTYPE_p_p_char values, libpostal_near_dupe_hash_options_t options, uint num_languages, SWIGTYPE_p_p_char languages, SWIGTYPE_p_size_t num_hashes) {
    global::System.IntPtr cPtr = libpostalPINVOKE.libpostal_near_dupe_hashes_languages(num_components, SWIGTYPE_p_p_char.getCPtr(labels), SWIGTYPE_p_p_char.getCPtr(values), libpostal_near_dupe_hash_options_t.getCPtr(options), num_languages, SWIGTYPE_p_p_char.getCPtr(languages), SWIGTYPE_p_size_t.getCPtr(num_hashes));
    SWIGTYPE_p_p_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_char(cPtr, false);
    if (libpostalPINVOKE.SWIGPendingException.Pending) throw libpostalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_p_char libpostal_place_languages(uint num_components, SWIGTYPE_p_p_char labels, SWIGTYPE_p_p_char values, SWIGTYPE_p_size_t num_languages) {
    global::System.IntPtr cPtr = libpostalPINVOKE.libpostal_place_languages(num_components, SWIGTYPE_p_p_char.getCPtr(labels), SWIGTYPE_p_p_char.getCPtr(values), SWIGTYPE_p_size_t.getCPtr(num_languages));
    SWIGTYPE_p_p_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_char(cPtr, false);
    return ret;
  }

  public static libpostal_duplicate_options_t libpostal_get_default_duplicate_options() {
    libpostal_duplicate_options_t ret = new libpostal_duplicate_options_t(libpostalPINVOKE.libpostal_get_default_duplicate_options(), true);
    return ret;
  }

  public static libpostal_duplicate_options_t libpostal_get_duplicate_options_with_languages(uint num_languages, SWIGTYPE_p_p_char languages) {
    libpostal_duplicate_options_t ret = new libpostal_duplicate_options_t(libpostalPINVOKE.libpostal_get_duplicate_options_with_languages(num_languages, SWIGTYPE_p_p_char.getCPtr(languages)), true);
    return ret;
  }

  public static libpostal_duplicate_status_t libpostal_is_name_duplicate(string value1, string value2, libpostal_duplicate_options_t options) {
    libpostal_duplicate_status_t ret = (libpostal_duplicate_status_t)libpostalPINVOKE.libpostal_is_name_duplicate(value1, value2, libpostal_duplicate_options_t.getCPtr(options));
    if (libpostalPINVOKE.SWIGPendingException.Pending) throw libpostalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static libpostal_duplicate_status_t libpostal_is_street_duplicate(string value1, string value2, libpostal_duplicate_options_t options) {
    libpostal_duplicate_status_t ret = (libpostal_duplicate_status_t)libpostalPINVOKE.libpostal_is_street_duplicate(value1, value2, libpostal_duplicate_options_t.getCPtr(options));
    if (libpostalPINVOKE.SWIGPendingException.Pending) throw libpostalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static libpostal_duplicate_status_t libpostal_is_house_number_duplicate(string value1, string value2, libpostal_duplicate_options_t options) {
    libpostal_duplicate_status_t ret = (libpostal_duplicate_status_t)libpostalPINVOKE.libpostal_is_house_number_duplicate(value1, value2, libpostal_duplicate_options_t.getCPtr(options));
    if (libpostalPINVOKE.SWIGPendingException.Pending) throw libpostalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static libpostal_duplicate_status_t libpostal_is_po_box_duplicate(string value1, string value2, libpostal_duplicate_options_t options) {
    libpostal_duplicate_status_t ret = (libpostal_duplicate_status_t)libpostalPINVOKE.libpostal_is_po_box_duplicate(value1, value2, libpostal_duplicate_options_t.getCPtr(options));
    if (libpostalPINVOKE.SWIGPendingException.Pending) throw libpostalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static libpostal_duplicate_status_t libpostal_is_unit_duplicate(string value1, string value2, libpostal_duplicate_options_t options) {
    libpostal_duplicate_status_t ret = (libpostal_duplicate_status_t)libpostalPINVOKE.libpostal_is_unit_duplicate(value1, value2, libpostal_duplicate_options_t.getCPtr(options));
    if (libpostalPINVOKE.SWIGPendingException.Pending) throw libpostalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static libpostal_duplicate_status_t libpostal_is_floor_duplicate(string value1, string value2, libpostal_duplicate_options_t options) {
    libpostal_duplicate_status_t ret = (libpostal_duplicate_status_t)libpostalPINVOKE.libpostal_is_floor_duplicate(value1, value2, libpostal_duplicate_options_t.getCPtr(options));
    if (libpostalPINVOKE.SWIGPendingException.Pending) throw libpostalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static libpostal_duplicate_status_t libpostal_is_postal_code_duplicate(string value1, string value2, libpostal_duplicate_options_t options) {
    libpostal_duplicate_status_t ret = (libpostal_duplicate_status_t)libpostalPINVOKE.libpostal_is_postal_code_duplicate(value1, value2, libpostal_duplicate_options_t.getCPtr(options));
    if (libpostalPINVOKE.SWIGPendingException.Pending) throw libpostalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static libpostal_duplicate_status_t libpostal_is_toponym_duplicate(uint num_components1, SWIGTYPE_p_p_char labels1, SWIGTYPE_p_p_char values1, uint num_components2, SWIGTYPE_p_p_char labels2, SWIGTYPE_p_p_char values2, libpostal_duplicate_options_t options) {
    libpostal_duplicate_status_t ret = (libpostal_duplicate_status_t)libpostalPINVOKE.libpostal_is_toponym_duplicate(num_components1, SWIGTYPE_p_p_char.getCPtr(labels1), SWIGTYPE_p_p_char.getCPtr(values1), num_components2, SWIGTYPE_p_p_char.getCPtr(labels2), SWIGTYPE_p_p_char.getCPtr(values2), libpostal_duplicate_options_t.getCPtr(options));
    if (libpostalPINVOKE.SWIGPendingException.Pending) throw libpostalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static libpostal_fuzzy_duplicate_options_t libpostal_get_default_fuzzy_duplicate_options() {
    libpostal_fuzzy_duplicate_options_t ret = new libpostal_fuzzy_duplicate_options_t(libpostalPINVOKE.libpostal_get_default_fuzzy_duplicate_options(), true);
    return ret;
  }

  public static libpostal_fuzzy_duplicate_options_t libpostal_get_default_fuzzy_duplicate_options_with_languages(uint num_languages, SWIGTYPE_p_p_char languages) {
    libpostal_fuzzy_duplicate_options_t ret = new libpostal_fuzzy_duplicate_options_t(libpostalPINVOKE.libpostal_get_default_fuzzy_duplicate_options_with_languages(num_languages, SWIGTYPE_p_p_char.getCPtr(languages)), true);
    return ret;
  }

  public static libpostal_fuzzy_duplicate_status_t libpostal_is_name_duplicate_fuzzy(uint num_tokens1, SWIGTYPE_p_p_char tokens1, SWIGTYPE_p_double token_scores1, uint num_tokens2, SWIGTYPE_p_p_char tokens2, SWIGTYPE_p_double token_scores2, libpostal_fuzzy_duplicate_options_t options) {
    libpostal_fuzzy_duplicate_status_t ret = new libpostal_fuzzy_duplicate_status_t(libpostalPINVOKE.libpostal_is_name_duplicate_fuzzy(num_tokens1, SWIGTYPE_p_p_char.getCPtr(tokens1), SWIGTYPE_p_double.getCPtr(token_scores1), num_tokens2, SWIGTYPE_p_p_char.getCPtr(tokens2), SWIGTYPE_p_double.getCPtr(token_scores2), libpostal_fuzzy_duplicate_options_t.getCPtr(options)), true);
    if (libpostalPINVOKE.SWIGPendingException.Pending) throw libpostalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static libpostal_fuzzy_duplicate_status_t libpostal_is_street_duplicate_fuzzy(uint num_tokens1, SWIGTYPE_p_p_char tokens1, SWIGTYPE_p_double token_scores1, uint num_tokens2, SWIGTYPE_p_p_char tokens2, SWIGTYPE_p_double token_scores2, libpostal_fuzzy_duplicate_options_t options) {
    libpostal_fuzzy_duplicate_status_t ret = new libpostal_fuzzy_duplicate_status_t(libpostalPINVOKE.libpostal_is_street_duplicate_fuzzy(num_tokens1, SWIGTYPE_p_p_char.getCPtr(tokens1), SWIGTYPE_p_double.getCPtr(token_scores1), num_tokens2, SWIGTYPE_p_p_char.getCPtr(tokens2), SWIGTYPE_p_double.getCPtr(token_scores2), libpostal_fuzzy_duplicate_options_t.getCPtr(options)), true);
    if (libpostalPINVOKE.SWIGPendingException.Pending) throw libpostalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool libpostal_setup() {
    bool ret = libpostalPINVOKE.libpostal_setup();
    return ret;
  }

  public static bool libpostal_setup_datadir(string datadir) {
    bool ret = libpostalPINVOKE.libpostal_setup_datadir(datadir);
    return ret;
  }

  public static void libpostal_teardown() {
    libpostalPINVOKE.libpostal_teardown();
  }

  public static bool libpostal_setup_parser() {
    bool ret = libpostalPINVOKE.libpostal_setup_parser();
    return ret;
  }

  public static bool libpostal_setup_parser_datadir(string datadir) {
    bool ret = libpostalPINVOKE.libpostal_setup_parser_datadir(datadir);
    return ret;
  }

  public static void libpostal_teardown_parser() {
    libpostalPINVOKE.libpostal_teardown_parser();
  }

  public static bool libpostal_setup_language_classifier() {
    bool ret = libpostalPINVOKE.libpostal_setup_language_classifier();
    return ret;
  }

  public static bool libpostal_setup_language_classifier_datadir(string datadir) {
    bool ret = libpostalPINVOKE.libpostal_setup_language_classifier_datadir(datadir);
    return ret;
  }

  public static void libpostal_teardown_language_classifier() {
    libpostalPINVOKE.libpostal_teardown_language_classifier();
  }

  public static libpostal_token_t libpostal_tokenize(string input, bool whitespace, SWIGTYPE_p_size_t n) {
    global::System.IntPtr cPtr = libpostalPINVOKE.libpostal_tokenize(input, whitespace, SWIGTYPE_p_size_t.getCPtr(n));
    libpostal_token_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new libpostal_token_t(cPtr, false);
    return ret;
  }

  public static string libpostal_normalize_string_languages(string input, SWIGTYPE_p_uint64_t options, uint num_languages, SWIGTYPE_p_p_char languages) {
    string ret = libpostalPINVOKE.libpostal_normalize_string_languages(input, SWIGTYPE_p_uint64_t.getCPtr(options), num_languages, SWIGTYPE_p_p_char.getCPtr(languages));
    if (libpostalPINVOKE.SWIGPendingException.Pending) throw libpostalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string libpostal_normalize_string(string input, SWIGTYPE_p_uint64_t options) {
    string ret = libpostalPINVOKE.libpostal_normalize_string(input, SWIGTYPE_p_uint64_t.getCPtr(options));
    if (libpostalPINVOKE.SWIGPendingException.Pending) throw libpostalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static libpostal_normalized_token_t libpostal_normalized_tokens(string input, SWIGTYPE_p_uint64_t string_options, SWIGTYPE_p_uint64_t token_options, bool whitespace, SWIGTYPE_p_size_t n) {
    global::System.IntPtr cPtr = libpostalPINVOKE.libpostal_normalized_tokens(input, SWIGTYPE_p_uint64_t.getCPtr(string_options), SWIGTYPE_p_uint64_t.getCPtr(token_options), whitespace, SWIGTYPE_p_size_t.getCPtr(n));
    libpostal_normalized_token_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new libpostal_normalized_token_t(cPtr, false);
    if (libpostalPINVOKE.SWIGPendingException.Pending) throw libpostalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static libpostal_normalized_token_t libpostal_normalized_tokens_languages(string input, SWIGTYPE_p_uint64_t string_options, SWIGTYPE_p_uint64_t token_options, bool whitespace, uint num_languages, SWIGTYPE_p_p_char languages, SWIGTYPE_p_size_t n) {
    global::System.IntPtr cPtr = libpostalPINVOKE.libpostal_normalized_tokens_languages(input, SWIGTYPE_p_uint64_t.getCPtr(string_options), SWIGTYPE_p_uint64_t.getCPtr(token_options), whitespace, num_languages, SWIGTYPE_p_p_char.getCPtr(languages), SWIGTYPE_p_size_t.getCPtr(n));
    libpostal_normalized_token_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new libpostal_normalized_token_t(cPtr, false);
    if (libpostalPINVOKE.SWIGPendingException.Pending) throw libpostalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static readonly int LIBPOSTAL_MAX_LANGUAGE_LEN = libpostalPINVOKE.LIBPOSTAL_MAX_LANGUAGE_LEN_get();
  public static readonly int LIBPOSTAL_ADDRESS_NONE = libpostalPINVOKE.LIBPOSTAL_ADDRESS_NONE_get();
  public static readonly int LIBPOSTAL_ADDRESS_ANY = libpostalPINVOKE.LIBPOSTAL_ADDRESS_ANY_get();
  public static readonly int LIBPOSTAL_ADDRESS_NAME = libpostalPINVOKE.LIBPOSTAL_ADDRESS_NAME_get();
  public static readonly int LIBPOSTAL_ADDRESS_HOUSE_NUMBER = libpostalPINVOKE.LIBPOSTAL_ADDRESS_HOUSE_NUMBER_get();
  public static readonly int LIBPOSTAL_ADDRESS_STREET = libpostalPINVOKE.LIBPOSTAL_ADDRESS_STREET_get();
  public static readonly int LIBPOSTAL_ADDRESS_UNIT = libpostalPINVOKE.LIBPOSTAL_ADDRESS_UNIT_get();
  public static readonly int LIBPOSTAL_ADDRESS_LEVEL = libpostalPINVOKE.LIBPOSTAL_ADDRESS_LEVEL_get();
  public static readonly int LIBPOSTAL_ADDRESS_STAIRCASE = libpostalPINVOKE.LIBPOSTAL_ADDRESS_STAIRCASE_get();
  public static readonly int LIBPOSTAL_ADDRESS_ENTRANCE = libpostalPINVOKE.LIBPOSTAL_ADDRESS_ENTRANCE_get();
  public static readonly int LIBPOSTAL_ADDRESS_CATEGORY = libpostalPINVOKE.LIBPOSTAL_ADDRESS_CATEGORY_get();
  public static readonly int LIBPOSTAL_ADDRESS_NEAR = libpostalPINVOKE.LIBPOSTAL_ADDRESS_NEAR_get();
  public static readonly int LIBPOSTAL_ADDRESS_TOPONYM = libpostalPINVOKE.LIBPOSTAL_ADDRESS_TOPONYM_get();
  public static readonly int LIBPOSTAL_ADDRESS_POSTAL_CODE = libpostalPINVOKE.LIBPOSTAL_ADDRESS_POSTAL_CODE_get();
  public static readonly int LIBPOSTAL_ADDRESS_PO_BOX = libpostalPINVOKE.LIBPOSTAL_ADDRESS_PO_BOX_get();
  public static readonly int LIBPOSTAL_ADDRESS_ALL = libpostalPINVOKE.LIBPOSTAL_ADDRESS_ALL_get();
  public static readonly int LIBPOSTAL_NORMALIZE_STRING_LATIN_ASCII = libpostalPINVOKE.LIBPOSTAL_NORMALIZE_STRING_LATIN_ASCII_get();
  public static readonly int LIBPOSTAL_NORMALIZE_STRING_TRANSLITERATE = libpostalPINVOKE.LIBPOSTAL_NORMALIZE_STRING_TRANSLITERATE_get();
  public static readonly int LIBPOSTAL_NORMALIZE_STRING_STRIP_ACCENTS = libpostalPINVOKE.LIBPOSTAL_NORMALIZE_STRING_STRIP_ACCENTS_get();
  public static readonly int LIBPOSTAL_NORMALIZE_STRING_DECOMPOSE = libpostalPINVOKE.LIBPOSTAL_NORMALIZE_STRING_DECOMPOSE_get();
  public static readonly int LIBPOSTAL_NORMALIZE_STRING_LOWERCASE = libpostalPINVOKE.LIBPOSTAL_NORMALIZE_STRING_LOWERCASE_get();
  public static readonly int LIBPOSTAL_NORMALIZE_STRING_TRIM = libpostalPINVOKE.LIBPOSTAL_NORMALIZE_STRING_TRIM_get();
  public static readonly int LIBPOSTAL_NORMALIZE_STRING_REPLACE_HYPHENS = libpostalPINVOKE.LIBPOSTAL_NORMALIZE_STRING_REPLACE_HYPHENS_get();
  public static readonly int LIBPOSTAL_NORMALIZE_STRING_COMPOSE = libpostalPINVOKE.LIBPOSTAL_NORMALIZE_STRING_COMPOSE_get();
  public static readonly int LIBPOSTAL_NORMALIZE_STRING_SIMPLE_LATIN_ASCII = libpostalPINVOKE.LIBPOSTAL_NORMALIZE_STRING_SIMPLE_LATIN_ASCII_get();
  public static readonly int LIBPOSTAL_NORMALIZE_STRING_REPLACE_NUMEX = libpostalPINVOKE.LIBPOSTAL_NORMALIZE_STRING_REPLACE_NUMEX_get();
  public static readonly int LIBPOSTAL_NORMALIZE_TOKEN_REPLACE_HYPHENS = libpostalPINVOKE.LIBPOSTAL_NORMALIZE_TOKEN_REPLACE_HYPHENS_get();
  public static readonly int LIBPOSTAL_NORMALIZE_TOKEN_DELETE_HYPHENS = libpostalPINVOKE.LIBPOSTAL_NORMALIZE_TOKEN_DELETE_HYPHENS_get();
  public static readonly int LIBPOSTAL_NORMALIZE_TOKEN_DELETE_FINAL_PERIOD = libpostalPINVOKE.LIBPOSTAL_NORMALIZE_TOKEN_DELETE_FINAL_PERIOD_get();
  public static readonly int LIBPOSTAL_NORMALIZE_TOKEN_DELETE_ACRONYM_PERIODS = libpostalPINVOKE.LIBPOSTAL_NORMALIZE_TOKEN_DELETE_ACRONYM_PERIODS_get();
  public static readonly int LIBPOSTAL_NORMALIZE_TOKEN_DROP_ENGLISH_POSSESSIVES = libpostalPINVOKE.LIBPOSTAL_NORMALIZE_TOKEN_DROP_ENGLISH_POSSESSIVES_get();
  public static readonly int LIBPOSTAL_NORMALIZE_TOKEN_DELETE_OTHER_APOSTROPHE = libpostalPINVOKE.LIBPOSTAL_NORMALIZE_TOKEN_DELETE_OTHER_APOSTROPHE_get();
  public static readonly int LIBPOSTAL_NORMALIZE_TOKEN_SPLIT_ALPHA_FROM_NUMERIC = libpostalPINVOKE.LIBPOSTAL_NORMALIZE_TOKEN_SPLIT_ALPHA_FROM_NUMERIC_get();
  public static readonly int LIBPOSTAL_NORMALIZE_TOKEN_REPLACE_DIGITS = libpostalPINVOKE.LIBPOSTAL_NORMALIZE_TOKEN_REPLACE_DIGITS_get();
  public static readonly int LIBPOSTAL_NORMALIZE_TOKEN_REPLACE_NUMERIC_TOKEN_LETTERS = libpostalPINVOKE.LIBPOSTAL_NORMALIZE_TOKEN_REPLACE_NUMERIC_TOKEN_LETTERS_get();
  public static readonly int LIBPOSTAL_NORMALIZE_TOKEN_REPLACE_NUMERIC_HYPHENS = libpostalPINVOKE.LIBPOSTAL_NORMALIZE_TOKEN_REPLACE_NUMERIC_HYPHENS_get();
  public static readonly int LIBPOSTAL_NORMALIZE_DEFAULT_STRING_OPTIONS = libpostalPINVOKE.LIBPOSTAL_NORMALIZE_DEFAULT_STRING_OPTIONS_get();
  public static readonly int LIBPOSTAL_NORMALIZE_DEFAULT_TOKEN_OPTIONS = libpostalPINVOKE.LIBPOSTAL_NORMALIZE_DEFAULT_TOKEN_OPTIONS_get();
  public static readonly int LIBPOSTAL_NORMALIZE_TOKEN_OPTIONS_DROP_PERIODS = libpostalPINVOKE.LIBPOSTAL_NORMALIZE_TOKEN_OPTIONS_DROP_PERIODS_get();
  public static readonly int LIBPOSTAL_NORMALIZE_DEFAULT_TOKEN_OPTIONS_NUMERIC = libpostalPINVOKE.LIBPOSTAL_NORMALIZE_DEFAULT_TOKEN_OPTIONS_NUMERIC_get();
}
